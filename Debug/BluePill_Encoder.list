
BluePill_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003298  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003434  08003434  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003434  08003434  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003434  08003434  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800343c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  080034ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080034ac  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d14d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202f  00000000  00000000  0002d1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002f218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  0002ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182b8  00000000  00000000  00030bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d83a  00000000  00000000  00048ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cca3  00000000  00000000  000566e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b34  00000000  00000000  000e33d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800338c 	.word	0x0800338c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800338c 	.word	0x0800338c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b09a      	sub	sp, #104	; 0x68
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[100] = {'\0'};
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	2260      	movs	r2, #96	; 0x60
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f002 fcd2 	bl	8002b08 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fb84 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f848 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f96c 	bl	8000448 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000170:	f000 f8ec 	bl	800034c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f93e 	bl	80003f4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000178:	f000 f89e 	bl	80002b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  HAL_TIM_Base_Start_IT(&htim2);
 800017c:	4818      	ldr	r0, [pc, #96]	; (80001e0 <main+0x94>)
 800017e:	f001 ffef 	bl	8002160 <HAL_TIM_Base_Start_IT>
  encodeur=0;
 8000182:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <main+0x98>)
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
  encbuf=0;
 8000188:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <main+0x9c>)
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  encbuf= encodeur*65535 + TIM2->CNT;
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <main+0x98>)
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	4613      	mov	r3, r2
 8000194:	041b      	lsls	r3, r3, #16
 8000196:	1a9b      	subs	r3, r3, r2
 8000198:	461a      	mov	r2, r3
 800019a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800019e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001a0:	4413      	add	r3, r2
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <main+0x9c>)
 80001a6:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(Jaune_GPIO_Port, Jaune_Pin);
 80001a8:	2140      	movs	r1, #64	; 0x40
 80001aa:	4810      	ldr	r0, [pc, #64]	; (80001ec <main+0xa0>)
 80001ac:	f000 fe90 	bl	8000ed0 <HAL_GPIO_TogglePin>
	  //sprintf(MSG, "ver = 14 pos= %ld dir= %d CNT= %d Old= %d overflow= %ld\n\r%c", encbuf, direction, (TIM2->CNT), oldpos, encodeur, '\0');
	  sprintf(MSG, "ver = 15 pos= %ld overflow= %ld\n\r", encbuf, encodeur);
 80001b0:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <main+0x9c>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <main+0x98>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	1d38      	adds	r0, r7, #4
 80001ba:	490d      	ldr	r1, [pc, #52]	; (80001f0 <main+0xa4>)
 80001bc:	f002 fcac 	bl	8002b18 <siprintf>
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 200);
 80001c0:	1d39      	adds	r1, r7, #4
 80001c2:	23c8      	movs	r3, #200	; 0xc8
 80001c4:	2264      	movs	r2, #100	; 0x64
 80001c6:	480b      	ldr	r0, [pc, #44]	; (80001f4 <main+0xa8>)
 80001c8:	f002 fb09 	bl	80027de <HAL_UART_Transmit>
	  oldpos=TIM2->CNT;
 80001cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <main+0xac>)
 80001d6:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 80001d8:	2064      	movs	r0, #100	; 0x64
 80001da:	f000 fbab 	bl	8000934 <HAL_Delay>
	  encbuf= encodeur*65535 + TIM2->CNT;
 80001de:	e7d6      	b.n	800018e <main+0x42>
 80001e0:	20000100 	.word	0x20000100
 80001e4:	20000098 	.word	0x20000098
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	40010800 	.word	0x40010800
 80001f0:	080033a4 	.word	0x080033a4
 80001f4:	200000a4 	.word	0x200000a4
 80001f8:	2000009c 	.word	0x2000009c

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b094      	sub	sp, #80	; 0x50
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 fc7c 	bl	8002b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800022c:	2305      	movs	r3, #5
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fe60 	bl	8000f1c <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000262:	f000 f985 	bl	8000570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000276:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f001 f8ca 	bl	800141c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800028e:	f000 f96f 	bl	8000570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000292:	2301      	movs	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fa56 	bl	8001750 <HAL_RCCEx_PeriphCLKConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002aa:	f000 f961 	bl	8000570 <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3750      	adds	r7, #80	; 0x50
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	460a      	mov	r2, r1
 80002c4:	801a      	strh	r2, [r3, #0]
 80002c6:	460a      	mov	r2, r1
 80002c8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002ca:	2300      	movs	r3, #0
 80002cc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <MX_RTC_Init+0x8c>)
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <MX_RTC_Init+0x90>)
 80002d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_RTC_Init+0x8c>)
 80002d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002da:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <MX_RTC_Init+0x8c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002e2:	4818      	ldr	r0, [pc, #96]	; (8000344 <MX_RTC_Init+0x8c>)
 80002e4:	f001 fbae 	bl	8001a44 <HAL_RTC_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80002ee:	f000 f93f 	bl	8000570 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2201      	movs	r2, #1
 8000302:	4619      	mov	r1, r3
 8000304:	480f      	ldr	r0, [pc, #60]	; (8000344 <MX_RTC_Init+0x8c>)
 8000306:	f001 fc33 	bl	8001b70 <HAL_RTC_SetTime>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000310:	f000 f92e 	bl	8000570 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000314:	2301      	movs	r3, #1
 8000316:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000318:	2301      	movs	r3, #1
 800031a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800031c:	2301      	movs	r3, #1
 800031e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000320:	2300      	movs	r3, #0
 8000322:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	4806      	ldr	r0, [pc, #24]	; (8000344 <MX_RTC_Init+0x8c>)
 800032c:	f001 fcb8 	bl	8001ca0 <HAL_RTC_SetDate>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000336:	f000 f91b 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000e8 	.word	0x200000e8
 8000348:	40002800 	.word	0x40002800

0800034c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08c      	sub	sp, #48	; 0x30
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	2224      	movs	r2, #36	; 0x24
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fbd4 	bl	8002b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_TIM2_Init+0xa4>)
 800036a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <MX_TIM2_Init+0xa4>)
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_TIM2_Init+0xa4>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_TIM2_Init+0xa4>)
 800037e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000382:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_TIM2_Init+0xa4>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_TIM2_Init+0xa4>)
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000390:	2303      	movs	r3, #3
 8000392:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000398:	2301      	movs	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80003a0:	2305      	movs	r3, #5
 80003a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003a8:	2301      	movs	r3, #1
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80003b0:	2305      	movs	r3, #5
 80003b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003b4:	f107 030c 	add.w	r3, r7, #12
 80003b8:	4619      	mov	r1, r3
 80003ba:	480d      	ldr	r0, [pc, #52]	; (80003f0 <MX_TIM2_Init+0xa4>)
 80003bc:	f001 ff22 	bl	8002204 <HAL_TIM_Encoder_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80003c6:	f000 f8d3 	bl	8000570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80003ca:	2310      	movs	r3, #16
 80003cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4619      	mov	r1, r3
 80003d6:	4806      	ldr	r0, [pc, #24]	; (80003f0 <MX_TIM2_Init+0xa4>)
 80003d8:	f002 f944 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80003e2:	f000 f8c5 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	3730      	adds	r7, #48	; 0x30
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000100 	.word	0x20000100

080003f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <MX_USART1_UART_Init+0x50>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800042c:	f002 f98a 	bl	8002744 <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000436:	f000 f89b 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200000a4 	.word	0x200000a4
 8000444:	40013800 	.word	0x40013800

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <MX_GPIO_Init+0xcc>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <MX_GPIO_Init+0xcc>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b27      	ldr	r3, [pc, #156]	; (8000514 <MX_GPIO_Init+0xcc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a26      	ldr	r2, [pc, #152]	; (8000514 <MX_GPIO_Init+0xcc>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b24      	ldr	r3, [pc, #144]	; (8000514 <MX_GPIO_Init+0xcc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b21      	ldr	r3, [pc, #132]	; (8000514 <MX_GPIO_Init+0xcc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a20      	ldr	r2, [pc, #128]	; (8000514 <MX_GPIO_Init+0xcc>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_GPIO_Init+0xcc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_GPIO_Init+0xcc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <MX_GPIO_Init+0xcc>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_GPIO_Init+0xcc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	4815      	ldr	r0, [pc, #84]	; (8000518 <MX_GPIO_Init+0xd0>)
 80004c4:	f000 fcec 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Jaune_GPIO_Port, Jaune_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	4813      	ldr	r0, [pc, #76]	; (800051c <MX_GPIO_Init+0xd4>)
 80004ce:	f000 fce7 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <MX_GPIO_Init+0xd0>)
 80004ec:	f000 fb54 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Jaune_Pin */
  GPIO_InitStruct.Pin = Jaune_Pin;
 80004f0:	2340      	movs	r3, #64	; 0x40
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Jaune_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_GPIO_Init+0xd4>)
 8000508:	f000 fb46 	bl	8000b98 <HAL_GPIO_Init>

}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	40011000 	.word	0x40011000
 800051c:	40010800 	.word	0x40010800

08000520 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	// There is no dir bit in the timer registers
	// So the way to knwo if overflow came from top or bottom
	// is to rel
	direction = (oldpos > 10000) ? 1 : -1;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000530:	4293      	cmp	r3, r2
 8000532:	dd01      	ble.n	8000538 <HAL_TIM_PeriodElapsedCallback+0x18>
 8000534:	2301      	movs	r3, #1
 8000536:	e001      	b.n	800053c <HAL_TIM_PeriodElapsedCallback+0x1c>
 8000538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800053e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000540:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000546:	f000 fcc3 	bl	8000ed0 <HAL_GPIO_TogglePin>
    encodeur+=direction;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000009c 	.word	0x2000009c
 8000564:	200000a0 	.word	0x200000a0
 8000568:	40011000 	.word	0x40011000
 800056c:	20000098 	.word	0x20000098

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	e7fe      	b.n	8000578 <Error_Handler+0x8>
	...

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_MspInit+0x5c>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <HAL_MspInit+0x5c>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_MspInit+0x5c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <HAL_MspInit+0x5c>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <HAL_MspInit+0x5c>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_MspInit+0x5c>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_MspInit+0x60>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_MspInit+0x60>)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010000 	.word	0x40010000

080005e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <HAL_RTC_MspInit+0x3c>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d110      	bne.n	8000614 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005f2:	f000 fc87 	bl	8000f04 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_RTC_MspInit+0x40>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_RTC_MspInit+0x40>)
 80005fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <HAL_RTC_MspInit+0x40>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_RTC_MspInit+0x44>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40002800 	.word	0x40002800
 8000620:	40021000 	.word	0x40021000
 8000624:	4242043c 	.word	0x4242043c

08000628 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000646:	d12b      	bne.n	80006a0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_TIM_Encoder_MspInit+0x80>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <HAL_TIM_Encoder_MspInit+0x80>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_TIM_Encoder_MspInit+0x80>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000678:	2303      	movs	r3, #3
 800067a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	4808      	ldr	r0, [pc, #32]	; (80006ac <HAL_TIM_Encoder_MspInit+0x84>)
 800068c:	f000 fa84 	bl	8000b98 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	201c      	movs	r0, #28
 8000696:	f000 fa48 	bl	8000b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800069a:	201c      	movs	r0, #28
 800069c:	f000 fa61 	bl	8000b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <HAL_UART_MspInit+0x8c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d131      	bne.n	8000734 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_UART_MspInit+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000704:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <HAL_UART_MspInit+0x94>)
 8000716:	f000 fa3f 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800071a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_UART_MspInit+0x94>)
 8000730:	f000 fa32 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f8b5 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//encodeur=encodeur + TIM2->CNT;
//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <TIM2_IRQHandler+0x10>)
 800079e:	f001 fdd3 	bl	8002348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000100 	.word	0x20000100

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f002 f96a 	bl	8002ab4 <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20005000 	.word	0x20005000
 800080c:	00000400 	.word	0x00000400
 8000810:	2000008c 	.word	0x2000008c
 8000814:	20000160 	.word	0x20000160

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800084a:	f7ff ffe5 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f002 f937 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fc7b 	bl	800014c <main>
  bx lr
 8000856:	4770      	bx	lr
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000860:	0800343c 	.word	0x0800343c
  ldr r2, =_sbss
 8000864:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000868:	2000015c 	.word	0x2000015c

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_Init+0x28>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_Init+0x28>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 f947 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff fe76 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f95f 	bl	8000b7e <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d8:	f000 f927 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000008 	.word	0x20000008
 800091c:	20000148 	.word	0x20000148

08000920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000148 	.word	0x20000148

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff fff0 	bl	8000920 <HAL_GetTick>
 8000940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Delay+0x44>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800095a:	bf00      	nop
 800095c:	f7ff ffe0 	bl	8000920 <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <__NVIC_EnableIRQ+0x34>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff2d 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff42 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff35 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffa2 	bl	8000ad0 <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b08b      	sub	sp, #44	; 0x2c
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e169      	b.n	8000e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bac:	2201      	movs	r2, #1
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 8158 	bne.w	8000e7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a9a      	ldr	r2, [pc, #616]	; (8000e38 <HAL_GPIO_Init+0x2a0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d05e      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a98      	ldr	r2, [pc, #608]	; (8000e38 <HAL_GPIO_Init+0x2a0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d875      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bda:	4a98      	ldr	r2, [pc, #608]	; (8000e3c <HAL_GPIO_Init+0x2a4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d058      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000be0:	4a96      	ldr	r2, [pc, #600]	; (8000e3c <HAL_GPIO_Init+0x2a4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d86f      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000be6:	4a96      	ldr	r2, [pc, #600]	; (8000e40 <HAL_GPIO_Init+0x2a8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d052      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bec:	4a94      	ldr	r2, [pc, #592]	; (8000e40 <HAL_GPIO_Init+0x2a8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d869      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bf2:	4a94      	ldr	r2, [pc, #592]	; (8000e44 <HAL_GPIO_Init+0x2ac>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d04c      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a92      	ldr	r2, [pc, #584]	; (8000e44 <HAL_GPIO_Init+0x2ac>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d863      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000bfe:	4a92      	ldr	r2, [pc, #584]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d046      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
 8000c04:	4a90      	ldr	r2, [pc, #576]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d85d      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000c0a:	2b12      	cmp	r3, #18
 8000c0c:	d82a      	bhi.n	8000c64 <HAL_GPIO_Init+0xcc>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d859      	bhi.n	8000cc6 <HAL_GPIO_Init+0x12e>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <HAL_GPIO_Init+0x80>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c93 	.word	0x08000c93
 8000c1c:	08000c6d 	.word	0x08000c6d
 8000c20:	08000c7f 	.word	0x08000c7f
 8000c24:	08000cc1 	.word	0x08000cc1
 8000c28:	08000cc7 	.word	0x08000cc7
 8000c2c:	08000cc7 	.word	0x08000cc7
 8000c30:	08000cc7 	.word	0x08000cc7
 8000c34:	08000cc7 	.word	0x08000cc7
 8000c38:	08000cc7 	.word	0x08000cc7
 8000c3c:	08000cc7 	.word	0x08000cc7
 8000c40:	08000cc7 	.word	0x08000cc7
 8000c44:	08000cc7 	.word	0x08000cc7
 8000c48:	08000cc7 	.word	0x08000cc7
 8000c4c:	08000cc7 	.word	0x08000cc7
 8000c50:	08000cc7 	.word	0x08000cc7
 8000c54:	08000cc7 	.word	0x08000cc7
 8000c58:	08000cc7 	.word	0x08000cc7
 8000c5c:	08000c75 	.word	0x08000c75
 8000c60:	08000c89 	.word	0x08000c89
 8000c64:	4a79      	ldr	r2, [pc, #484]	; (8000e4c <HAL_GPIO_Init+0x2b4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6a:	e02c      	b.n	8000cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e029      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e024      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	3308      	adds	r3, #8
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e01f      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	330c      	adds	r3, #12
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e01a      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e013      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	611a      	str	r2, [r3, #16]
          break;
 8000cb2:	e009      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	615a      	str	r2, [r3, #20]
          break;
 8000cbe:	e003      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
          break;
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x130>
          break;
 8000cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2bff      	cmp	r3, #255	; 0xff
 8000ccc:	d801      	bhi.n	8000cd2 <HAL_GPIO_Init+0x13a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	e001      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2bff      	cmp	r3, #255	; 0xff
 8000cdc:	d802      	bhi.n	8000ce4 <HAL_GPIO_Init+0x14c>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	e002      	b.n	8000cea <HAL_GPIO_Init+0x152>
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	3b08      	subs	r3, #8
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	6a39      	ldr	r1, [r7, #32]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	431a      	orrs	r2, r3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d18:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <HAL_GPIO_Init+0x2b8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d30:	4a48      	ldr	r2, [pc, #288]	; (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <HAL_GPIO_Init+0x2c0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d013      	beq.n	8000d84 <HAL_GPIO_Init+0x1ec>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3f      	ldr	r2, [pc, #252]	; (8000e5c <HAL_GPIO_Init+0x2c4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d00d      	beq.n	8000d80 <HAL_GPIO_Init+0x1e8>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3e      	ldr	r2, [pc, #248]	; (8000e60 <HAL_GPIO_Init+0x2c8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a3d      	ldr	r2, [pc, #244]	; (8000e64 <HAL_GPIO_Init+0x2cc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_GPIO_Init+0x1e0>
 8000d74:	2303      	movs	r3, #3
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d84:	2300      	movs	r3, #0
 8000d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d96:	492f      	ldr	r1, [pc, #188]	; (8000e54 <HAL_GPIO_Init+0x2bc>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	492c      	ldr	r1, [pc, #176]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4928      	ldr	r1, [pc, #160]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	4922      	ldr	r1, [pc, #136]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	491e      	ldr	r1, [pc, #120]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	4918      	ldr	r1, [pc, #96]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4914      	ldr	r1, [pc, #80]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d021      	beq.n	8000e6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	490e      	ldr	r1, [pc, #56]	; (8000e68 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60cb      	str	r3, [r1, #12]
 8000e34:	e021      	b.n	8000e7a <HAL_GPIO_Init+0x2e2>
 8000e36:	bf00      	nop
 8000e38:	10320000 	.word	0x10320000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	10220000 	.word	0x10220000
 8000e44:	10210000 	.word	0x10210000
 8000e48:	10120000 	.word	0x10120000
 8000e4c:	10110000 	.word	0x10110000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40011400 	.word	0x40011400
 8000e68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_GPIO_Init+0x304>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4909      	ldr	r1, [pc, #36]	; (8000e9c <HAL_GPIO_Init+0x304>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f47f ae8e 	bne.w	8000bac <HAL_GPIO_Init+0x14>
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	372c      	adds	r7, #44	; 0x2c
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ebc:	e003      	b.n	8000ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	611a      	str	r2, [r3, #16]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43d9      	mvns	r1, r3
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	611a      	str	r2, [r3, #16]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	420e0020 	.word	0x420e0020

08000f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e26c      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8087 	beq.w	800104a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3c:	4b92      	ldr	r3, [pc, #584]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d00c      	beq.n	8000f62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f48:	4b8f      	ldr	r3, [pc, #572]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d112      	bne.n	8000f7a <HAL_RCC_OscConfig+0x5e>
 8000f54:	4b8c      	ldr	r3, [pc, #560]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d10b      	bne.n	8000f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f62:	4b89      	ldr	r3, [pc, #548]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d06c      	beq.n	8001048 <HAL_RCC_OscConfig+0x12c>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d168      	bne.n	8001048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e246      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x76>
 8000f84:	4b80      	ldr	r3, [pc, #512]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a7f      	ldr	r2, [pc, #508]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e02e      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x98>
 8000f9a:	4b7b      	ldr	r3, [pc, #492]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a7a      	ldr	r2, [pc, #488]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b78      	ldr	r3, [pc, #480]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a77      	ldr	r2, [pc, #476]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e01d      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xbc>
 8000fbe:	4b72      	ldr	r3, [pc, #456]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a71      	ldr	r2, [pc, #452]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b6f      	ldr	r3, [pc, #444]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000fd8:	4b6b      	ldr	r3, [pc, #428]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a6a      	ldr	r2, [pc, #424]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b68      	ldr	r3, [pc, #416]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a67      	ldr	r2, [pc, #412]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d013      	beq.n	8001020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fc92 	bl	8000920 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fc8e 	bl	8000920 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1fa      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0xe4>
 800101e:	e014      	b.n	800104a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fc7e 	bl	8000920 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fc7a 	bl	8000920 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e1e6      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x10c>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d063      	beq.n	800111e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b08      	cmp	r3, #8
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x18c>
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b43      	ldr	r3, [pc, #268]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <HAL_RCC_OscConfig+0x176>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e1ba      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4939      	ldr	r1, [pc, #228]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e03a      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_RCC_OscConfig+0x270>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fc33 	bl	8000920 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fc2f 	bl	8000920 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e19b      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4927      	ldr	r1, [pc, #156]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_RCC_OscConfig+0x270>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc12 	bl	8000920 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fc0e 	bl	8000920 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e17a      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d03a      	beq.n	80011a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d019      	beq.n	8001166 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_RCC_OscConfig+0x274>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001138:	f7ff fbf2 	bl	8000920 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fbee 	bl	8000920 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e15a      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fad8 	bl	8001714 <RCC_Delay>
 8001164:	e01c      	b.n	80011a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_RCC_OscConfig+0x274>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fbd8 	bl	8000920 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001172:	e00f      	b.n	8001194 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fbd4 	bl	8000920 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d908      	bls.n	8001194 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e140      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	42420000 	.word	0x42420000
 8001190:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e9      	bne.n	8001174 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80a6 	beq.w	80012fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10d      	bne.n	80011da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b94      	ldr	r3, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a93      	ldr	r2, [pc, #588]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b91      	ldr	r3, [pc, #580]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4b8e      	ldr	r3, [pc, #568]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a8a      	ldr	r2, [pc, #552]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb95 	bl	8000920 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fa:	f7ff fb91 	bl	8000920 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0fd      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d106      	bne.n	800122e <HAL_RCC_OscConfig+0x312>
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	e02d      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x334>
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	6213      	str	r3, [r2, #32]
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0304 	bic.w	r3, r3, #4
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	e01c      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b05      	cmp	r3, #5
 8001256:	d10c      	bne.n	8001272 <HAL_RCC_OscConfig+0x356>
 8001258:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a69      	ldr	r2, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	e00b      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a66      	ldr	r2, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a63      	ldr	r2, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d015      	beq.n	80012be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fb45 	bl	8000920 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff fb41 	bl	8000920 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0ab      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0ee      	beq.n	800129a <HAL_RCC_OscConfig+0x37e>
 80012bc:	e014      	b.n	80012e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fb2f 	bl	8000920 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff fb2b 	bl	8000920 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e095      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ee      	bne.n	80012c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a47      	ldr	r2, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8081 	beq.w	8001406 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d061      	beq.n	80013d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d146      	bne.n	80013a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001318:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff faff 	bl	8000920 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fafb 	bl	8000920 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e067      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d108      	bne.n	8001360 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	492d      	ldr	r1, [pc, #180]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a19      	ldr	r1, [r3, #32]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	430b      	orrs	r3, r1
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff facf 	bl	8000920 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff facb 	bl	8000920 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e037      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x46a>
 80013a4:	e02f      	b.n	8001406 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fab8 	bl	8000920 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fab4 	bl	8000920 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e020      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x498>
 80013d2:	e018      	b.n	8001406 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e013      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	42420060 	.word	0x42420060

0800141c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0d0      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0207 	bic.w	r2, r3, #7
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800149a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e073      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06b      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4936      	ldr	r1, [pc, #216]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff fa08 	bl	8000920 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff fa04 	bl	8000920 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e053      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d210      	bcs.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 0207 	bic.w	r2, r3, #7
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f821 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	5ccb      	ldrb	r3, [r1, r3]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1cc>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1d0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f966 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	080033e8 	.word	0x080033e8
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b490      	push	{r4, r7}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f8:	1d3c      	adds	r4, r7, #4
 80015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001600:	f240 2301 	movw	r3, #513	; 0x201
 8001604:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x40>
 800162a:	2b08      	cmp	r3, #8
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x46>
 800162e:	e02d      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001632:	623b      	str	r3, [r7, #32]
      break;
 8001634:	e02d      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	0c9b      	lsrs	r3, r3, #18
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001642:	4413      	add	r3, r2
 8001644:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001648:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	0c5b      	lsrs	r3, r3, #17
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001662:	4413      	add	r3, r2
 8001664:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001668:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800166e:	fb02 f203 	mul.w	r2, r2, r3
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	e004      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	623b      	str	r3, [r7, #32]
      break;
 800168a:	e002      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800168e:	623b      	str	r3, [r7, #32]
      break;
 8001690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001692:	6a3b      	ldr	r3, [r7, #32]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bc90      	pop	{r4, r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	080033c8 	.word	0x080033c8
 80016a4:	40021000 	.word	0x40021000
 80016a8:	007a1200 	.word	0x007a1200
 80016ac:	003d0900 	.word	0x003d0900

080016b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000000 	.word	0x20000000

080016c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c8:	f7ff fff2 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	4903      	ldr	r1, [pc, #12]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	080033f8 	.word	0x080033f8

080016ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_RCC_GetHCLKFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	0adb      	lsrs	r3, r3, #11
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	4903      	ldr	r1, [pc, #12]	; (8001710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	080033f8 	.word	0x080033f8

08001714 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <RCC_Delay+0x34>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <RCC_Delay+0x38>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0a5b      	lsrs	r3, r3, #9
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001730:	bf00      	nop
  }
  while (Delay --);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	60fa      	str	r2, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <RCC_Delay+0x1c>
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000000 	.word	0x20000000
 800174c:	10624dd3 	.word	0x10624dd3

08001750 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d07d      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a4b      	ldr	r2, [pc, #300]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001794:	2301      	movs	r3, #1
 8001796:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d118      	bne.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a4:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b0:	f7ff f8b6 	bl	8000920 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	e008      	b.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b8:	f7ff f8b2 	bl	8000920 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e06d      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d02e      	beq.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d027      	beq.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d014      	beq.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff f881 	bl	8000920 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f87d 	bl	8000920 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e036      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ee      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4917      	ldr	r1, [pc, #92]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001852:	4313      	orrs	r3, r2
 8001854:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001866:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	490b      	ldr	r1, [pc, #44]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4904      	ldr	r1, [pc, #16]	; (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40007000 	.word	0x40007000
 80018b8:	42420440 	.word	0x42420440

080018bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b08d      	sub	sp, #52	; 0x34
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018c4:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80018c6:	f107 040c 	add.w	r4, r7, #12
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d0:	f240 2301 	movw	r3, #513	; 0x201
 80018d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d00a      	beq.n	8001906 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	f200 8091 	bhi.w	8001a1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d04c      	beq.n	8001998 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d07c      	beq.n	80019fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001904:	e089      	b.n	8001a1a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001906:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800190c:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8082 	beq.w	8001a1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001926:	4413      	add	r3, r2
 8001928:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800192c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d018      	beq.n	800196a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c5b      	lsrs	r3, r3, #17
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001946:	4413      	add	r3, r2
 8001948:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00d      	beq.n	8001974 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001958:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001968:	e004      	b.n	8001974 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	4a33      	ldr	r2, [pc, #204]	; (8001a3c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001980:	d102      	bne.n	8001988 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001986:	e04a      	b.n	8001a1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4a2c      	ldr	r2, [pc, #176]	; (8001a40 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001996:	e042      	b.n	8001a1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a8:	d108      	bne.n	80019bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80019b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ba:	e01f      	b.n	80019fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c6:	d109      	bne.n	80019dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80019d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019da:	e00f      	b.n	80019fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019e6:	d11c      	bne.n	8001a22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d016      	beq.n	8001a22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80019f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019fa:	e012      	b.n	8001a22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80019fc:	e011      	b.n	8001a22 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80019fe:	f7ff fe75 	bl	80016ec <HAL_RCC_GetPCLK2Freq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	0b9b      	lsrs	r3, r3, #14
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001a18:	e004      	b.n	8001a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e002      	b.n	8001a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e000      	b.n	8001a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001a22:	bf00      	nop
    }
  }
  return (frequency);
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3734      	adds	r7, #52	; 0x34
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd90      	pop	{r4, r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	080033d8 	.word	0x080033d8
 8001a34:	40021000 	.word	0x40021000
 8001a38:	007a1200 	.word	0x007a1200
 8001a3c:	003d0900 	.word	0x003d0900
 8001a40:	aaaaaaab 	.word	0xaaaaaaab

08001a44 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e084      	b.n	8001b64 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7c5b      	ldrb	r3, [r3, #17]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7fe fdb8 	bl	80005e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f9c8 	bl	8001e0c <HAL_RTC_WaitForSynchro>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2204      	movs	r2, #4
 8001a86:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e06b      	b.n	8001b64 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fa81 	bl	8001f94 <RTC_EnterInitMode>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e060      	b.n	8001b64 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0207 	bic.w	r2, r2, #7
 8001ab0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <HAL_RTC_Init+0x128>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <HAL_RTC_Init+0x128>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <HAL_RTC_Init+0x128>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4926      	ldr	r1, [pc, #152]	; (8001b6c <HAL_RTC_Init+0x128>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae0:	d003      	beq.n	8001aea <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e00e      	b.n	8001b08 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff fee6 	bl	80018bc <HAL_RCCEx_GetPeriphCLKFreq>
 8001af0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d104      	bne.n	8001b02 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2204      	movs	r2, #4
 8001afc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e030      	b.n	8001b64 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 010f 	bic.w	r1, r3, #15
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0c1a      	lsrs	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	b291      	uxth	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fa55 	bl	8001fe4 <RTC_ExitInitMode>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2204      	movs	r2, #4
 8001b44:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00c      	b.n	8001b64 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001b62:	2300      	movs	r3, #0
  }
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40006c00 	.word	0x40006c00

08001b70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RTC_SetTime+0x20>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e080      	b.n	8001c96 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	7c1b      	ldrb	r3, [r3, #16]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RTC_SetTime+0x30>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e07a      	b.n	8001c96 <HAL_RTC_SetTime+0x126>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d113      	bne.n	8001bda <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001bbc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a5b      	subs	r3, r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001bce:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001bd4:	4413      	add	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e01e      	b.n	8001c18 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fa28 	bl	8002034 <RTC_Bcd2ToByte>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001bec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fa1d 	bl	8002034 <RTC_Bcd2ToByte>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4613      	mov	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c06:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	789b      	ldrb	r3, [r3, #2]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fa11 	bl	8002034 <RTC_Bcd2ToByte>
 8001c12:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001c14:	4423      	add	r3, r4
 8001c16:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c18:	6979      	ldr	r1, [r7, #20]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f953 	bl	8001ec6 <RTC_WriteTimeCounter>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e02f      	b.n	8001c96 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0205 	bic.w	r2, r2, #5
 8001c44:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f964 	bl	8001f14 <RTC_ReadAlarmCounter>
 8001c4c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c54:	d018      	beq.n	8001c88 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d214      	bcs.n	8001c88 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001c64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c68:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c6a:	6939      	ldr	r1, [r7, #16]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f96a 	bl	8001f46 <RTC_WriteAlarmCounter>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e006      	b.n	8001c96 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
	...

08001ca0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RTC_SetDate+0x24>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e097      	b.n	8001df8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	7c1b      	ldrb	r3, [r3, #16]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_RTC_SetDate+0x34>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e091      	b.n	8001df8 <HAL_RTC_SetDate+0x158>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	78da      	ldrb	r2, [r3, #3]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	785a      	ldrb	r2, [r3, #1]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	789a      	ldrb	r2, [r3, #2]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	739a      	strb	r2, [r3, #14]
 8001cfe:	e01a      	b.n	8001d36 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	78db      	ldrb	r3, [r3, #3]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f995 	bl	8002034 <RTC_Bcd2ToByte>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	785b      	ldrb	r3, [r3, #1]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f98c 	bl	8002034 <RTC_Bcd2ToByte>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f983 	bl	8002034 <RTC_Bcd2ToByte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	7bdb      	ldrb	r3, [r3, #15]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	7b59      	ldrb	r1, [r3, #13]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	7b9b      	ldrb	r3, [r3, #14]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f000 f993 	bl	8002070 <RTC_WeekDayNum>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	7b1a      	ldrb	r2, [r3, #12]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f883 	bl	8001e66 <RTC_ReadTimeCounter>
 8001d60:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <HAL_RTC_SetDate+0x160>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0adb      	lsrs	r3, r3, #11
 8001d6c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b18      	cmp	r3, #24
 8001d72:	d93a      	bls.n	8001dea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_RTC_SetDate+0x164>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_RTC_SetDate+0x168>)
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001d8a:	69f9      	ldr	r1, [r7, #28]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f89a 	bl	8001ec6 <RTC_WriteTimeCounter>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e027      	b.n	8001df8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f8b3 	bl	8001f14 <RTC_ReadAlarmCounter>
 8001dae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db6:	d018      	beq.n	8001dea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d214      	bcs.n	8001dea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001dc6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f8b9 	bl	8001f46 <RTC_WriteAlarmCounter>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e006      	b.n	8001df8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	91a2b3c5 	.word	0x91a2b3c5
 8001e04:	aaaaaaab 	.word	0xaaaaaaab
 8001e08:	00015180 	.word	0x00015180

08001e0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e01d      	b.n	8001e5e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0208 	bic.w	r2, r2, #8
 8001e30:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001e32:	f7fe fd75 	bl	8000920 <HAL_GetTick>
 8001e36:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e38:	e009      	b.n	8001e4e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001e3a:	f7fe fd71 	bl	8000920 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e48:	d901      	bls.n	8001e4e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e007      	b.n	8001e5e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b087      	sub	sp, #28
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	827b      	strh	r3, [r7, #18]
 8001e72:	2300      	movs	r3, #0
 8001e74:	823b      	strh	r3, [r7, #16]
 8001e76:	2300      	movs	r3, #0
 8001e78:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001e96:	8a7a      	ldrh	r2, [r7, #18]
 8001e98:	8a3b      	ldrh	r3, [r7, #16]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d008      	beq.n	8001eb0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001e9e:	8a3b      	ldrh	r3, [r7, #16]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e004      	b.n	8001eba <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001eb0:	8a7b      	ldrh	r3, [r7, #18]
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	89fb      	ldrh	r3, [r7, #14]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001eba:	697b      	ldr	r3, [r7, #20]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f85d 	bl	8001f94 <RTC_EnterInitMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e011      	b.n	8001f0a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	0c12      	lsrs	r2, r2, #16
 8001eee:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f872 	bl	8001fe4 <RTC_ExitInitMode>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	81fb      	strh	r3, [r7, #14]
 8001f20:	2300      	movs	r3, #0
 8001f22:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001f34:	89fb      	ldrh	r3, [r7, #14]
 8001f36:	041a      	lsls	r2, r3, #16
 8001f38:	89bb      	ldrh	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f81d 	bl	8001f94 <RTC_EnterInitMode>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e011      	b.n	8001f8a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	0c12      	lsrs	r2, r2, #16
 8001f6e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b292      	uxth	r2, r2
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f832 	bl	8001fe4 <RTC_ExitInitMode>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001fa0:	f7fe fcbe 	bl	8000920 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fa6:	e009      	b.n	8001fbc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001fa8:	f7fe fcba 	bl	8000920 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb6:	d901      	bls.n	8001fbc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e00f      	b.n	8001fdc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ee      	beq.n	8001fa8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0210 	orr.w	r2, r2, #16
 8001fd8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0210 	bic.w	r2, r2, #16
 8001ffe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002000:	f7fe fc8e 	bl	8000920 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002006:	e009      	b.n	800201c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002008:	f7fe fc8a 	bl	8000920 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002016:	d901      	bls.n	800201c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e007      	b.n	800202c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ee      	beq.n	8002008 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4413      	add	r3, r2
 8002062:	b2db      	uxtb	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
 800207c:	4613      	mov	r3, r2
 800207e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800208e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d82d      	bhi.n	80020f2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	4a2c      	ldr	r2, [pc, #176]	; (8002154 <RTC_WeekDayNum+0xe4>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	085a      	lsrs	r2, r3, #1
 80020aa:	78bb      	ldrb	r3, [r7, #2]
 80020ac:	441a      	add	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	441a      	add	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	441a      	add	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3b01      	subs	r3, #1
 80020be:	4926      	ldr	r1, [pc, #152]	; (8002158 <RTC_WeekDayNum+0xe8>)
 80020c0:	fba1 1303 	umull	r1, r3, r1, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	1ad2      	subs	r2, r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	4922      	ldr	r1, [pc, #136]	; (8002158 <RTC_WeekDayNum+0xe8>)
 80020ce:	fba1 1303 	umull	r1, r3, r1, r3
 80020d2:	09db      	lsrs	r3, r3, #7
 80020d4:	4413      	add	r3, r2
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <RTC_WeekDayNum+0xec>)
 80020da:	fba3 1302 	umull	r1, r3, r3, r2
 80020de:	1ad1      	subs	r1, r2, r3
 80020e0:	0849      	lsrs	r1, r1, #1
 80020e2:	440b      	add	r3, r1
 80020e4:	0899      	lsrs	r1, r3, #2
 80020e6:	460b      	mov	r3, r1
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a5b      	subs	r3, r3, r1
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e029      	b.n	8002146 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <RTC_WeekDayNum+0xe4>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	085a      	lsrs	r2, r3, #1
 8002106:	78bb      	ldrb	r3, [r7, #2]
 8002108:	441a      	add	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	441a      	add	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	441a      	add	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4910      	ldr	r1, [pc, #64]	; (8002158 <RTC_WeekDayNum+0xe8>)
 8002118:	fba1 1303 	umull	r1, r3, r1, r3
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	1ad2      	subs	r2, r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	490d      	ldr	r1, [pc, #52]	; (8002158 <RTC_WeekDayNum+0xe8>)
 8002124:	fba1 1303 	umull	r1, r3, r1, r3
 8002128:	09db      	lsrs	r3, r3, #7
 800212a:	4413      	add	r3, r2
 800212c:	1c9a      	adds	r2, r3, #2
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <RTC_WeekDayNum+0xec>)
 8002130:	fba3 1302 	umull	r1, r3, r3, r2
 8002134:	1ad1      	subs	r1, r2, r3
 8002136:	0849      	lsrs	r1, r1, #1
 8002138:	440b      	add	r3, r1
 800213a:	0899      	lsrs	r1, r3, #2
 800213c:	460b      	mov	r3, r1
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	b2db      	uxtb	r3, r3
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	38e38e39 	.word	0x38e38e39
 8002158:	51eb851f 	.word	0x51eb851f
 800215c:	24924925 	.word	0x24924925

08002160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e03a      	b.n	80021ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_TIM_Base_Start_IT+0x98>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00e      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x58>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d009      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x58>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <HAL_TIM_Base_Start_IT+0x9c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x58>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a13      	ldr	r2, [pc, #76]	; (8002200 <HAL_TIM_Base_Start_IT+0xa0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d010      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021da:	e007      	b.n	80021ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800

08002204 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e093      	b.n	8002340 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7fe f9fb 	bl	8000628 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002248:	f023 0307 	bic.w	r3, r3, #7
 800224c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f000 f9a1 	bl	80025a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	4313      	orrs	r3, r2
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022a4:	f023 030c 	bic.w	r3, r3, #12
 80022a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	011a      	lsls	r2, r3, #4
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	031b      	lsls	r3, r3, #12
 80022d4:	4313      	orrs	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	4313      	orrs	r3, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b02      	cmp	r3, #2
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8ed 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8e0 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8ef 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0204 	mvn.w	r2, #4
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8c3 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f8b6 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f8c5 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b08      	cmp	r3, #8
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b08      	cmp	r3, #8
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0208 	mvn.w	r2, #8
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2204      	movs	r2, #4
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f899 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f88c 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f89b 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b10      	cmp	r3, #16
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b10      	cmp	r3, #16
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0210 	mvn.w	r2, #16
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2208      	movs	r2, #8
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f86f 	bl	800256a <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f862 	bl	8002558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f871 	bl	800257c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10e      	bne.n	80024cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0201 	mvn.w	r2, #1
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe f82a 	bl	8000520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b80      	cmp	r3, #128	; 0x80
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d107      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f91d 	bl	8002732 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d10e      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d107      	bne.n	8002524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f835 	bl	800258e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b20      	cmp	r3, #32
 8002530:	d10e      	bne.n	8002550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b20      	cmp	r3, #32
 800253e:	d107      	bne.n	8002550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0220 	mvn.w	r2, #32
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8e8 	bl	8002720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <TIM_Base_SetConfig+0xb8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00b      	beq.n	80025d0 <TIM_Base_SetConfig+0x30>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025be:	d007      	beq.n	80025d0 <TIM_Base_SetConfig+0x30>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a26      	ldr	r2, [pc, #152]	; (800265c <TIM_Base_SetConfig+0xbc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <TIM_Base_SetConfig+0x30>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a25      	ldr	r2, [pc, #148]	; (8002660 <TIM_Base_SetConfig+0xc0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <TIM_Base_SetConfig+0xb8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00b      	beq.n	8002602 <TIM_Base_SetConfig+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d007      	beq.n	8002602 <TIM_Base_SetConfig+0x62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <TIM_Base_SetConfig+0xbc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <TIM_Base_SetConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <TIM_Base_SetConfig+0xc0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <TIM_Base_SetConfig+0xb8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	615a      	str	r2, [r3, #20]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40000400 	.word	0x40000400
 8002660:	40000800 	.word	0x40000800

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e046      	b.n	800270a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a16      	ldr	r2, [pc, #88]	; (8002714 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00e      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d009      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10c      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800

08002720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e03f      	b.n	80027d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fd ffa0 	bl	80006b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f905 	bl	8002998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b08a      	sub	sp, #40	; 0x28
 80027e2:	af02      	add	r7, sp, #8
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d17c      	bne.n	80028f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_UART_Transmit+0x2c>
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e075      	b.n	80028fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x3e>
 8002818:	2302      	movs	r3, #2
 800281a:	e06e      	b.n	80028fa <HAL_UART_Transmit+0x11c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2221      	movs	r2, #33	; 0x21
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002832:	f7fe f875 	bl	8000920 <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	88fa      	ldrh	r2, [r7, #6]
 800283c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d108      	bne.n	8002860 <HAL_UART_Transmit+0x82>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e003      	b.n	8002868 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002870:	e02a      	b.n	80028c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f840 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e036      	b.n	80028fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3302      	adds	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	e007      	b.n	80028ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	781a      	ldrb	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	3301      	adds	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1cf      	bne.n	8002872 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f810 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002912:	e02c      	b.n	800296e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291a:	d028      	beq.n	800296e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <UART_WaitOnFlagUntilTimeout+0x30>
 8002922:	f7fd fffd 	bl	8000920 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	429a      	cmp	r2, r3
 8002930:	d21d      	bcs.n	800296e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002940:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e00f      	b.n	800298e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4013      	ands	r3, r2
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	429a      	cmp	r2, r3
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	429a      	cmp	r2, r3
 800298a:	d0c3      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029d2:	f023 030c 	bic.w	r3, r3, #12
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	430b      	orrs	r3, r1
 80029de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <UART_SetConfig+0x114>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d103      	bne.n	8002a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a00:	f7fe fe74 	bl	80016ec <HAL_RCC_GetPCLK2Freq>
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	e002      	b.n	8002a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a08:	f7fe fe5c 	bl	80016c4 <HAL_RCC_GetPCLK1Freq>
 8002a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <UART_SetConfig+0x118>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	0119      	lsls	r1, r3, #4
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <UART_SetConfig+0x118>)
 8002a46:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2064      	movs	r0, #100	; 0x64
 8002a4e:	fb00 f303 	mul.w	r3, r0, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	3332      	adds	r3, #50	; 0x32
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <UART_SetConfig+0x118>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a64:	4419      	add	r1, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009a      	lsls	r2, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <UART_SetConfig+0x118>)
 8002a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2064      	movs	r0, #100	; 0x64
 8002a86:	fb00 f303 	mul.w	r3, r0, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	3332      	adds	r3, #50	; 0x32
 8002a90:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <UART_SetConfig+0x118>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	51eb851f 	.word	0x51eb851f

08002ab4 <__errno>:
 8002ab4:	4b01      	ldr	r3, [pc, #4]	; (8002abc <__errno+0x8>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	2000000c 	.word	0x2000000c

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	4d0c      	ldr	r5, [pc, #48]	; (8002af8 <__libc_init_array+0x38>)
 8002ac6:	4c0d      	ldr	r4, [pc, #52]	; (8002afc <__libc_init_array+0x3c>)
 8002ac8:	1b64      	subs	r4, r4, r5
 8002aca:	10a4      	asrs	r4, r4, #2
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	f000 fc5c 	bl	800338c <_init>
 8002ad4:	2600      	movs	r6, #0
 8002ad6:	4d0a      	ldr	r5, [pc, #40]	; (8002b00 <__libc_init_array+0x40>)
 8002ad8:	4c0a      	ldr	r4, [pc, #40]	; (8002b04 <__libc_init_array+0x44>)
 8002ada:	1b64      	subs	r4, r4, r5
 8002adc:	10a4      	asrs	r4, r4, #2
 8002ade:	42a6      	cmp	r6, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae8:	4798      	blx	r3
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af2:	4798      	blx	r3
 8002af4:	3601      	adds	r6, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08003434 	.word	0x08003434
 8002afc:	08003434 	.word	0x08003434
 8002b00:	08003434 	.word	0x08003434
 8002b04:	08003438 	.word	0x08003438

08002b08 <memset>:
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4402      	add	r2, r0
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <memset+0xa>
 8002b10:	4770      	bx	lr
 8002b12:	f803 1b01 	strb.w	r1, [r3], #1
 8002b16:	e7f9      	b.n	8002b0c <memset+0x4>

08002b18 <siprintf>:
 8002b18:	b40e      	push	{r1, r2, r3}
 8002b1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b1e:	b500      	push	{lr}
 8002b20:	b09c      	sub	sp, #112	; 0x70
 8002b22:	ab1d      	add	r3, sp, #116	; 0x74
 8002b24:	9002      	str	r0, [sp, #8]
 8002b26:	9006      	str	r0, [sp, #24]
 8002b28:	9107      	str	r1, [sp, #28]
 8002b2a:	9104      	str	r1, [sp, #16]
 8002b2c:	4808      	ldr	r0, [pc, #32]	; (8002b50 <siprintf+0x38>)
 8002b2e:	4909      	ldr	r1, [pc, #36]	; (8002b54 <siprintf+0x3c>)
 8002b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b34:	9105      	str	r1, [sp, #20]
 8002b36:	6800      	ldr	r0, [r0, #0]
 8002b38:	a902      	add	r1, sp, #8
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	f000 f868 	bl	8002c10 <_svfiprintf_r>
 8002b40:	2200      	movs	r2, #0
 8002b42:	9b02      	ldr	r3, [sp, #8]
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	b01c      	add	sp, #112	; 0x70
 8002b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b4c:	b003      	add	sp, #12
 8002b4e:	4770      	bx	lr
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	ffff0208 	.word	0xffff0208

08002b58 <__ssputs_r>:
 8002b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5c:	688e      	ldr	r6, [r1, #8]
 8002b5e:	4682      	mov	sl, r0
 8002b60:	429e      	cmp	r6, r3
 8002b62:	460c      	mov	r4, r1
 8002b64:	4690      	mov	r8, r2
 8002b66:	461f      	mov	r7, r3
 8002b68:	d838      	bhi.n	8002bdc <__ssputs_r+0x84>
 8002b6a:	898a      	ldrh	r2, [r1, #12]
 8002b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b70:	d032      	beq.n	8002bd8 <__ssputs_r+0x80>
 8002b72:	6825      	ldr	r5, [r4, #0]
 8002b74:	6909      	ldr	r1, [r1, #16]
 8002b76:	3301      	adds	r3, #1
 8002b78:	eba5 0901 	sub.w	r9, r5, r1
 8002b7c:	6965      	ldr	r5, [r4, #20]
 8002b7e:	444b      	add	r3, r9
 8002b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b88:	106d      	asrs	r5, r5, #1
 8002b8a:	429d      	cmp	r5, r3
 8002b8c:	bf38      	it	cc
 8002b8e:	461d      	movcc	r5, r3
 8002b90:	0553      	lsls	r3, r2, #21
 8002b92:	d531      	bpl.n	8002bf8 <__ssputs_r+0xa0>
 8002b94:	4629      	mov	r1, r5
 8002b96:	f000 fb53 	bl	8003240 <_malloc_r>
 8002b9a:	4606      	mov	r6, r0
 8002b9c:	b950      	cbnz	r0, 8002bb4 <__ssputs_r+0x5c>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba4:	f8ca 3000 	str.w	r3, [sl]
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bae:	81a3      	strh	r3, [r4, #12]
 8002bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb4:	464a      	mov	r2, r9
 8002bb6:	6921      	ldr	r1, [r4, #16]
 8002bb8:	f000 face 	bl	8003158 <memcpy>
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc6:	81a3      	strh	r3, [r4, #12]
 8002bc8:	6126      	str	r6, [r4, #16]
 8002bca:	444e      	add	r6, r9
 8002bcc:	6026      	str	r6, [r4, #0]
 8002bce:	463e      	mov	r6, r7
 8002bd0:	6165      	str	r5, [r4, #20]
 8002bd2:	eba5 0509 	sub.w	r5, r5, r9
 8002bd6:	60a5      	str	r5, [r4, #8]
 8002bd8:	42be      	cmp	r6, r7
 8002bda:	d900      	bls.n	8002bde <__ssputs_r+0x86>
 8002bdc:	463e      	mov	r6, r7
 8002bde:	4632      	mov	r2, r6
 8002be0:	4641      	mov	r1, r8
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	f000 fac6 	bl	8003174 <memmove>
 8002be8:	68a3      	ldr	r3, [r4, #8]
 8002bea:	6822      	ldr	r2, [r4, #0]
 8002bec:	1b9b      	subs	r3, r3, r6
 8002bee:	4432      	add	r2, r6
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	60a3      	str	r3, [r4, #8]
 8002bf4:	6022      	str	r2, [r4, #0]
 8002bf6:	e7db      	b.n	8002bb0 <__ssputs_r+0x58>
 8002bf8:	462a      	mov	r2, r5
 8002bfa:	f000 fb7b 	bl	80032f4 <_realloc_r>
 8002bfe:	4606      	mov	r6, r0
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d1e1      	bne.n	8002bc8 <__ssputs_r+0x70>
 8002c04:	4650      	mov	r0, sl
 8002c06:	6921      	ldr	r1, [r4, #16]
 8002c08:	f000 face 	bl	80031a8 <_free_r>
 8002c0c:	e7c7      	b.n	8002b9e <__ssputs_r+0x46>
	...

08002c10 <_svfiprintf_r>:
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c14:	4698      	mov	r8, r3
 8002c16:	898b      	ldrh	r3, [r1, #12]
 8002c18:	4607      	mov	r7, r0
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	4614      	mov	r4, r2
 8002c20:	b09d      	sub	sp, #116	; 0x74
 8002c22:	d50e      	bpl.n	8002c42 <_svfiprintf_r+0x32>
 8002c24:	690b      	ldr	r3, [r1, #16]
 8002c26:	b963      	cbnz	r3, 8002c42 <_svfiprintf_r+0x32>
 8002c28:	2140      	movs	r1, #64	; 0x40
 8002c2a:	f000 fb09 	bl	8003240 <_malloc_r>
 8002c2e:	6028      	str	r0, [r5, #0]
 8002c30:	6128      	str	r0, [r5, #16]
 8002c32:	b920      	cbnz	r0, 8002c3e <_svfiprintf_r+0x2e>
 8002c34:	230c      	movs	r3, #12
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c3c:	e0d1      	b.n	8002de2 <_svfiprintf_r+0x1d2>
 8002c3e:	2340      	movs	r3, #64	; 0x40
 8002c40:	616b      	str	r3, [r5, #20]
 8002c42:	2300      	movs	r3, #0
 8002c44:	9309      	str	r3, [sp, #36]	; 0x24
 8002c46:	2320      	movs	r3, #32
 8002c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c4c:	2330      	movs	r3, #48	; 0x30
 8002c4e:	f04f 0901 	mov.w	r9, #1
 8002c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002dfc <_svfiprintf_r+0x1ec>
 8002c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c5e:	4623      	mov	r3, r4
 8002c60:	469a      	mov	sl, r3
 8002c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c66:	b10a      	cbz	r2, 8002c6c <_svfiprintf_r+0x5c>
 8002c68:	2a25      	cmp	r2, #37	; 0x25
 8002c6a:	d1f9      	bne.n	8002c60 <_svfiprintf_r+0x50>
 8002c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8002c70:	d00b      	beq.n	8002c8a <_svfiprintf_r+0x7a>
 8002c72:	465b      	mov	r3, fp
 8002c74:	4622      	mov	r2, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	4638      	mov	r0, r7
 8002c7a:	f7ff ff6d 	bl	8002b58 <__ssputs_r>
 8002c7e:	3001      	adds	r0, #1
 8002c80:	f000 80aa 	beq.w	8002dd8 <_svfiprintf_r+0x1c8>
 8002c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c86:	445a      	add	r2, fp
 8002c88:	9209      	str	r2, [sp, #36]	; 0x24
 8002c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a2 	beq.w	8002dd8 <_svfiprintf_r+0x1c8>
 8002c94:	2300      	movs	r3, #0
 8002c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c9e:	f10a 0a01 	add.w	sl, sl, #1
 8002ca2:	9304      	str	r3, [sp, #16]
 8002ca4:	9307      	str	r3, [sp, #28]
 8002ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002caa:	931a      	str	r3, [sp, #104]	; 0x68
 8002cac:	4654      	mov	r4, sl
 8002cae:	2205      	movs	r2, #5
 8002cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cb4:	4851      	ldr	r0, [pc, #324]	; (8002dfc <_svfiprintf_r+0x1ec>)
 8002cb6:	f000 fa41 	bl	800313c <memchr>
 8002cba:	9a04      	ldr	r2, [sp, #16]
 8002cbc:	b9d8      	cbnz	r0, 8002cf6 <_svfiprintf_r+0xe6>
 8002cbe:	06d0      	lsls	r0, r2, #27
 8002cc0:	bf44      	itt	mi
 8002cc2:	2320      	movmi	r3, #32
 8002cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cc8:	0711      	lsls	r1, r2, #28
 8002cca:	bf44      	itt	mi
 8002ccc:	232b      	movmi	r3, #43	; 0x2b
 8002cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8002cd8:	d015      	beq.n	8002d06 <_svfiprintf_r+0xf6>
 8002cda:	4654      	mov	r4, sl
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f04f 0c0a 	mov.w	ip, #10
 8002ce2:	9a07      	ldr	r2, [sp, #28]
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cea:	3b30      	subs	r3, #48	; 0x30
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	d94e      	bls.n	8002d8e <_svfiprintf_r+0x17e>
 8002cf0:	b1b0      	cbz	r0, 8002d20 <_svfiprintf_r+0x110>
 8002cf2:	9207      	str	r2, [sp, #28]
 8002cf4:	e014      	b.n	8002d20 <_svfiprintf_r+0x110>
 8002cf6:	eba0 0308 	sub.w	r3, r0, r8
 8002cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	46a2      	mov	sl, r4
 8002d02:	9304      	str	r3, [sp, #16]
 8002d04:	e7d2      	b.n	8002cac <_svfiprintf_r+0x9c>
 8002d06:	9b03      	ldr	r3, [sp, #12]
 8002d08:	1d19      	adds	r1, r3, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	9103      	str	r1, [sp, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bfbb      	ittet	lt
 8002d12:	425b      	neglt	r3, r3
 8002d14:	f042 0202 	orrlt.w	r2, r2, #2
 8002d18:	9307      	strge	r3, [sp, #28]
 8002d1a:	9307      	strlt	r3, [sp, #28]
 8002d1c:	bfb8      	it	lt
 8002d1e:	9204      	strlt	r2, [sp, #16]
 8002d20:	7823      	ldrb	r3, [r4, #0]
 8002d22:	2b2e      	cmp	r3, #46	; 0x2e
 8002d24:	d10c      	bne.n	8002d40 <_svfiprintf_r+0x130>
 8002d26:	7863      	ldrb	r3, [r4, #1]
 8002d28:	2b2a      	cmp	r3, #42	; 0x2a
 8002d2a:	d135      	bne.n	8002d98 <_svfiprintf_r+0x188>
 8002d2c:	9b03      	ldr	r3, [sp, #12]
 8002d2e:	3402      	adds	r4, #2
 8002d30:	1d1a      	adds	r2, r3, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	9203      	str	r2, [sp, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bfb8      	it	lt
 8002d3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d3e:	9305      	str	r3, [sp, #20]
 8002d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e0c <_svfiprintf_r+0x1fc>
 8002d44:	2203      	movs	r2, #3
 8002d46:	4650      	mov	r0, sl
 8002d48:	7821      	ldrb	r1, [r4, #0]
 8002d4a:	f000 f9f7 	bl	800313c <memchr>
 8002d4e:	b140      	cbz	r0, 8002d62 <_svfiprintf_r+0x152>
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	eba0 000a 	sub.w	r0, r0, sl
 8002d56:	fa03 f000 	lsl.w	r0, r3, r0
 8002d5a:	9b04      	ldr	r3, [sp, #16]
 8002d5c:	3401      	adds	r4, #1
 8002d5e:	4303      	orrs	r3, r0
 8002d60:	9304      	str	r3, [sp, #16]
 8002d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d66:	2206      	movs	r2, #6
 8002d68:	4825      	ldr	r0, [pc, #148]	; (8002e00 <_svfiprintf_r+0x1f0>)
 8002d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d6e:	f000 f9e5 	bl	800313c <memchr>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d038      	beq.n	8002de8 <_svfiprintf_r+0x1d8>
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <_svfiprintf_r+0x1f4>)
 8002d78:	bb1b      	cbnz	r3, 8002dc2 <_svfiprintf_r+0x1b2>
 8002d7a:	9b03      	ldr	r3, [sp, #12]
 8002d7c:	3307      	adds	r3, #7
 8002d7e:	f023 0307 	bic.w	r3, r3, #7
 8002d82:	3308      	adds	r3, #8
 8002d84:	9303      	str	r3, [sp, #12]
 8002d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d88:	4433      	add	r3, r6
 8002d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8c:	e767      	b.n	8002c5e <_svfiprintf_r+0x4e>
 8002d8e:	460c      	mov	r4, r1
 8002d90:	2001      	movs	r0, #1
 8002d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d96:	e7a5      	b.n	8002ce4 <_svfiprintf_r+0xd4>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f04f 0c0a 	mov.w	ip, #10
 8002d9e:	4619      	mov	r1, r3
 8002da0:	3401      	adds	r4, #1
 8002da2:	9305      	str	r3, [sp, #20]
 8002da4:	4620      	mov	r0, r4
 8002da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002daa:	3a30      	subs	r2, #48	; 0x30
 8002dac:	2a09      	cmp	r2, #9
 8002dae:	d903      	bls.n	8002db8 <_svfiprintf_r+0x1a8>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0c5      	beq.n	8002d40 <_svfiprintf_r+0x130>
 8002db4:	9105      	str	r1, [sp, #20]
 8002db6:	e7c3      	b.n	8002d40 <_svfiprintf_r+0x130>
 8002db8:	4604      	mov	r4, r0
 8002dba:	2301      	movs	r3, #1
 8002dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dc0:	e7f0      	b.n	8002da4 <_svfiprintf_r+0x194>
 8002dc2:	ab03      	add	r3, sp, #12
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	462a      	mov	r2, r5
 8002dc8:	4638      	mov	r0, r7
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <_svfiprintf_r+0x1f8>)
 8002dcc:	a904      	add	r1, sp, #16
 8002dce:	f3af 8000 	nop.w
 8002dd2:	1c42      	adds	r2, r0, #1
 8002dd4:	4606      	mov	r6, r0
 8002dd6:	d1d6      	bne.n	8002d86 <_svfiprintf_r+0x176>
 8002dd8:	89ab      	ldrh	r3, [r5, #12]
 8002dda:	065b      	lsls	r3, r3, #25
 8002ddc:	f53f af2c 	bmi.w	8002c38 <_svfiprintf_r+0x28>
 8002de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002de2:	b01d      	add	sp, #116	; 0x74
 8002de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de8:	ab03      	add	r3, sp, #12
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	462a      	mov	r2, r5
 8002dee:	4638      	mov	r0, r7
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <_svfiprintf_r+0x1f8>)
 8002df2:	a904      	add	r1, sp, #16
 8002df4:	f000 f87c 	bl	8002ef0 <_printf_i>
 8002df8:	e7eb      	b.n	8002dd2 <_svfiprintf_r+0x1c2>
 8002dfa:	bf00      	nop
 8002dfc:	08003400 	.word	0x08003400
 8002e00:	0800340a 	.word	0x0800340a
 8002e04:	00000000 	.word	0x00000000
 8002e08:	08002b59 	.word	0x08002b59
 8002e0c:	08003406 	.word	0x08003406

08002e10 <_printf_common>:
 8002e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e14:	4616      	mov	r6, r2
 8002e16:	4699      	mov	r9, r3
 8002e18:	688a      	ldr	r2, [r1, #8]
 8002e1a:	690b      	ldr	r3, [r1, #16]
 8002e1c:	4607      	mov	r7, r0
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	bfb8      	it	lt
 8002e22:	4613      	movlt	r3, r2
 8002e24:	6033      	str	r3, [r6, #0]
 8002e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e30:	b10a      	cbz	r2, 8002e36 <_printf_common+0x26>
 8002e32:	3301      	adds	r3, #1
 8002e34:	6033      	str	r3, [r6, #0]
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	0699      	lsls	r1, r3, #26
 8002e3a:	bf42      	ittt	mi
 8002e3c:	6833      	ldrmi	r3, [r6, #0]
 8002e3e:	3302      	addmi	r3, #2
 8002e40:	6033      	strmi	r3, [r6, #0]
 8002e42:	6825      	ldr	r5, [r4, #0]
 8002e44:	f015 0506 	ands.w	r5, r5, #6
 8002e48:	d106      	bne.n	8002e58 <_printf_common+0x48>
 8002e4a:	f104 0a19 	add.w	sl, r4, #25
 8002e4e:	68e3      	ldr	r3, [r4, #12]
 8002e50:	6832      	ldr	r2, [r6, #0]
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	42ab      	cmp	r3, r5
 8002e56:	dc28      	bgt.n	8002eaa <_printf_common+0x9a>
 8002e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e5c:	1e13      	subs	r3, r2, #0
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	bf18      	it	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	0692      	lsls	r2, r2, #26
 8002e66:	d42d      	bmi.n	8002ec4 <_printf_common+0xb4>
 8002e68:	4649      	mov	r1, r9
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e70:	47c0      	blx	r8
 8002e72:	3001      	adds	r0, #1
 8002e74:	d020      	beq.n	8002eb8 <_printf_common+0xa8>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	68e5      	ldr	r5, [r4, #12]
 8002e7a:	f003 0306 	and.w	r3, r3, #6
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	bf18      	it	ne
 8002e82:	2500      	movne	r5, #0
 8002e84:	6832      	ldr	r2, [r6, #0]
 8002e86:	f04f 0600 	mov.w	r6, #0
 8002e8a:	68a3      	ldr	r3, [r4, #8]
 8002e8c:	bf08      	it	eq
 8002e8e:	1aad      	subeq	r5, r5, r2
 8002e90:	6922      	ldr	r2, [r4, #16]
 8002e92:	bf08      	it	eq
 8002e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	bfc4      	itt	gt
 8002e9c:	1a9b      	subgt	r3, r3, r2
 8002e9e:	18ed      	addgt	r5, r5, r3
 8002ea0:	341a      	adds	r4, #26
 8002ea2:	42b5      	cmp	r5, r6
 8002ea4:	d11a      	bne.n	8002edc <_printf_common+0xcc>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	e008      	b.n	8002ebc <_printf_common+0xac>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	4652      	mov	r2, sl
 8002eae:	4649      	mov	r1, r9
 8002eb0:	4638      	mov	r0, r7
 8002eb2:	47c0      	blx	r8
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d103      	bne.n	8002ec0 <_printf_common+0xb0>
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec0:	3501      	adds	r5, #1
 8002ec2:	e7c4      	b.n	8002e4e <_printf_common+0x3e>
 8002ec4:	2030      	movs	r0, #48	; 0x30
 8002ec6:	18e1      	adds	r1, r4, r3
 8002ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ed2:	4422      	add	r2, r4
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eda:	e7c5      	b.n	8002e68 <_printf_common+0x58>
 8002edc:	2301      	movs	r3, #1
 8002ede:	4622      	mov	r2, r4
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	47c0      	blx	r8
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d0e6      	beq.n	8002eb8 <_printf_common+0xa8>
 8002eea:	3601      	adds	r6, #1
 8002eec:	e7d9      	b.n	8002ea2 <_printf_common+0x92>
	...

08002ef0 <_printf_i>:
 8002ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	7e27      	ldrb	r7, [r4, #24]
 8002ef8:	4691      	mov	r9, r2
 8002efa:	2f78      	cmp	r7, #120	; 0x78
 8002efc:	4680      	mov	r8, r0
 8002efe:	469a      	mov	sl, r3
 8002f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f06:	d807      	bhi.n	8002f18 <_printf_i+0x28>
 8002f08:	2f62      	cmp	r7, #98	; 0x62
 8002f0a:	d80a      	bhi.n	8002f22 <_printf_i+0x32>
 8002f0c:	2f00      	cmp	r7, #0
 8002f0e:	f000 80d9 	beq.w	80030c4 <_printf_i+0x1d4>
 8002f12:	2f58      	cmp	r7, #88	; 0x58
 8002f14:	f000 80a4 	beq.w	8003060 <_printf_i+0x170>
 8002f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f20:	e03a      	b.n	8002f98 <_printf_i+0xa8>
 8002f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f26:	2b15      	cmp	r3, #21
 8002f28:	d8f6      	bhi.n	8002f18 <_printf_i+0x28>
 8002f2a:	a001      	add	r0, pc, #4	; (adr r0, 8002f30 <_printf_i+0x40>)
 8002f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f30:	08002f89 	.word	0x08002f89
 8002f34:	08002f9d 	.word	0x08002f9d
 8002f38:	08002f19 	.word	0x08002f19
 8002f3c:	08002f19 	.word	0x08002f19
 8002f40:	08002f19 	.word	0x08002f19
 8002f44:	08002f19 	.word	0x08002f19
 8002f48:	08002f9d 	.word	0x08002f9d
 8002f4c:	08002f19 	.word	0x08002f19
 8002f50:	08002f19 	.word	0x08002f19
 8002f54:	08002f19 	.word	0x08002f19
 8002f58:	08002f19 	.word	0x08002f19
 8002f5c:	080030ab 	.word	0x080030ab
 8002f60:	08002fcd 	.word	0x08002fcd
 8002f64:	0800308d 	.word	0x0800308d
 8002f68:	08002f19 	.word	0x08002f19
 8002f6c:	08002f19 	.word	0x08002f19
 8002f70:	080030cd 	.word	0x080030cd
 8002f74:	08002f19 	.word	0x08002f19
 8002f78:	08002fcd 	.word	0x08002fcd
 8002f7c:	08002f19 	.word	0x08002f19
 8002f80:	08002f19 	.word	0x08002f19
 8002f84:	08003095 	.word	0x08003095
 8002f88:	680b      	ldr	r3, [r1, #0]
 8002f8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f8e:	1d1a      	adds	r2, r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	600a      	str	r2, [r1, #0]
 8002f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0a4      	b.n	80030e6 <_printf_i+0x1f6>
 8002f9c:	6825      	ldr	r5, [r4, #0]
 8002f9e:	6808      	ldr	r0, [r1, #0]
 8002fa0:	062e      	lsls	r6, r5, #24
 8002fa2:	f100 0304 	add.w	r3, r0, #4
 8002fa6:	d50a      	bpl.n	8002fbe <_printf_i+0xce>
 8002fa8:	6805      	ldr	r5, [r0, #0]
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	2d00      	cmp	r5, #0
 8002fae:	da03      	bge.n	8002fb8 <_printf_i+0xc8>
 8002fb0:	232d      	movs	r3, #45	; 0x2d
 8002fb2:	426d      	negs	r5, r5
 8002fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fb8:	230a      	movs	r3, #10
 8002fba:	485e      	ldr	r0, [pc, #376]	; (8003134 <_printf_i+0x244>)
 8002fbc:	e019      	b.n	8002ff2 <_printf_i+0x102>
 8002fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fc2:	6805      	ldr	r5, [r0, #0]
 8002fc4:	600b      	str	r3, [r1, #0]
 8002fc6:	bf18      	it	ne
 8002fc8:	b22d      	sxthne	r5, r5
 8002fca:	e7ef      	b.n	8002fac <_printf_i+0xbc>
 8002fcc:	680b      	ldr	r3, [r1, #0]
 8002fce:	6825      	ldr	r5, [r4, #0]
 8002fd0:	1d18      	adds	r0, r3, #4
 8002fd2:	6008      	str	r0, [r1, #0]
 8002fd4:	0628      	lsls	r0, r5, #24
 8002fd6:	d501      	bpl.n	8002fdc <_printf_i+0xec>
 8002fd8:	681d      	ldr	r5, [r3, #0]
 8002fda:	e002      	b.n	8002fe2 <_printf_i+0xf2>
 8002fdc:	0669      	lsls	r1, r5, #25
 8002fde:	d5fb      	bpl.n	8002fd8 <_printf_i+0xe8>
 8002fe0:	881d      	ldrh	r5, [r3, #0]
 8002fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2308      	moveq	r3, #8
 8002fe8:	230a      	movne	r3, #10
 8002fea:	4852      	ldr	r0, [pc, #328]	; (8003134 <_printf_i+0x244>)
 8002fec:	2100      	movs	r1, #0
 8002fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ff2:	6866      	ldr	r6, [r4, #4]
 8002ff4:	2e00      	cmp	r6, #0
 8002ff6:	bfa8      	it	ge
 8002ff8:	6821      	ldrge	r1, [r4, #0]
 8002ffa:	60a6      	str	r6, [r4, #8]
 8002ffc:	bfa4      	itt	ge
 8002ffe:	f021 0104 	bicge.w	r1, r1, #4
 8003002:	6021      	strge	r1, [r4, #0]
 8003004:	b90d      	cbnz	r5, 800300a <_printf_i+0x11a>
 8003006:	2e00      	cmp	r6, #0
 8003008:	d04d      	beq.n	80030a6 <_printf_i+0x1b6>
 800300a:	4616      	mov	r6, r2
 800300c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003010:	fb03 5711 	mls	r7, r3, r1, r5
 8003014:	5dc7      	ldrb	r7, [r0, r7]
 8003016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800301a:	462f      	mov	r7, r5
 800301c:	42bb      	cmp	r3, r7
 800301e:	460d      	mov	r5, r1
 8003020:	d9f4      	bls.n	800300c <_printf_i+0x11c>
 8003022:	2b08      	cmp	r3, #8
 8003024:	d10b      	bne.n	800303e <_printf_i+0x14e>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	07df      	lsls	r7, r3, #31
 800302a:	d508      	bpl.n	800303e <_printf_i+0x14e>
 800302c:	6923      	ldr	r3, [r4, #16]
 800302e:	6861      	ldr	r1, [r4, #4]
 8003030:	4299      	cmp	r1, r3
 8003032:	bfde      	ittt	le
 8003034:	2330      	movle	r3, #48	; 0x30
 8003036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800303a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800303e:	1b92      	subs	r2, r2, r6
 8003040:	6122      	str	r2, [r4, #16]
 8003042:	464b      	mov	r3, r9
 8003044:	4621      	mov	r1, r4
 8003046:	4640      	mov	r0, r8
 8003048:	f8cd a000 	str.w	sl, [sp]
 800304c:	aa03      	add	r2, sp, #12
 800304e:	f7ff fedf 	bl	8002e10 <_printf_common>
 8003052:	3001      	adds	r0, #1
 8003054:	d14c      	bne.n	80030f0 <_printf_i+0x200>
 8003056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800305a:	b004      	add	sp, #16
 800305c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003060:	4834      	ldr	r0, [pc, #208]	; (8003134 <_printf_i+0x244>)
 8003062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003066:	680e      	ldr	r6, [r1, #0]
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	f856 5b04 	ldr.w	r5, [r6], #4
 800306e:	061f      	lsls	r7, r3, #24
 8003070:	600e      	str	r6, [r1, #0]
 8003072:	d514      	bpl.n	800309e <_printf_i+0x1ae>
 8003074:	07d9      	lsls	r1, r3, #31
 8003076:	bf44      	itt	mi
 8003078:	f043 0320 	orrmi.w	r3, r3, #32
 800307c:	6023      	strmi	r3, [r4, #0]
 800307e:	b91d      	cbnz	r5, 8003088 <_printf_i+0x198>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	f023 0320 	bic.w	r3, r3, #32
 8003086:	6023      	str	r3, [r4, #0]
 8003088:	2310      	movs	r3, #16
 800308a:	e7af      	b.n	8002fec <_printf_i+0xfc>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	f043 0320 	orr.w	r3, r3, #32
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	2378      	movs	r3, #120	; 0x78
 8003096:	4828      	ldr	r0, [pc, #160]	; (8003138 <_printf_i+0x248>)
 8003098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800309c:	e7e3      	b.n	8003066 <_printf_i+0x176>
 800309e:	065e      	lsls	r6, r3, #25
 80030a0:	bf48      	it	mi
 80030a2:	b2ad      	uxthmi	r5, r5
 80030a4:	e7e6      	b.n	8003074 <_printf_i+0x184>
 80030a6:	4616      	mov	r6, r2
 80030a8:	e7bb      	b.n	8003022 <_printf_i+0x132>
 80030aa:	680b      	ldr	r3, [r1, #0]
 80030ac:	6826      	ldr	r6, [r4, #0]
 80030ae:	1d1d      	adds	r5, r3, #4
 80030b0:	6960      	ldr	r0, [r4, #20]
 80030b2:	600d      	str	r5, [r1, #0]
 80030b4:	0635      	lsls	r5, r6, #24
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	d501      	bpl.n	80030be <_printf_i+0x1ce>
 80030ba:	6018      	str	r0, [r3, #0]
 80030bc:	e002      	b.n	80030c4 <_printf_i+0x1d4>
 80030be:	0671      	lsls	r1, r6, #25
 80030c0:	d5fb      	bpl.n	80030ba <_printf_i+0x1ca>
 80030c2:	8018      	strh	r0, [r3, #0]
 80030c4:	2300      	movs	r3, #0
 80030c6:	4616      	mov	r6, r2
 80030c8:	6123      	str	r3, [r4, #16]
 80030ca:	e7ba      	b.n	8003042 <_printf_i+0x152>
 80030cc:	680b      	ldr	r3, [r1, #0]
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	600a      	str	r2, [r1, #0]
 80030d2:	681e      	ldr	r6, [r3, #0]
 80030d4:	2100      	movs	r1, #0
 80030d6:	4630      	mov	r0, r6
 80030d8:	6862      	ldr	r2, [r4, #4]
 80030da:	f000 f82f 	bl	800313c <memchr>
 80030de:	b108      	cbz	r0, 80030e4 <_printf_i+0x1f4>
 80030e0:	1b80      	subs	r0, r0, r6
 80030e2:	6060      	str	r0, [r4, #4]
 80030e4:	6863      	ldr	r3, [r4, #4]
 80030e6:	6123      	str	r3, [r4, #16]
 80030e8:	2300      	movs	r3, #0
 80030ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030ee:	e7a8      	b.n	8003042 <_printf_i+0x152>
 80030f0:	4632      	mov	r2, r6
 80030f2:	4649      	mov	r1, r9
 80030f4:	4640      	mov	r0, r8
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	47d0      	blx	sl
 80030fa:	3001      	adds	r0, #1
 80030fc:	d0ab      	beq.n	8003056 <_printf_i+0x166>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	079b      	lsls	r3, r3, #30
 8003102:	d413      	bmi.n	800312c <_printf_i+0x23c>
 8003104:	68e0      	ldr	r0, [r4, #12]
 8003106:	9b03      	ldr	r3, [sp, #12]
 8003108:	4298      	cmp	r0, r3
 800310a:	bfb8      	it	lt
 800310c:	4618      	movlt	r0, r3
 800310e:	e7a4      	b.n	800305a <_printf_i+0x16a>
 8003110:	2301      	movs	r3, #1
 8003112:	4632      	mov	r2, r6
 8003114:	4649      	mov	r1, r9
 8003116:	4640      	mov	r0, r8
 8003118:	47d0      	blx	sl
 800311a:	3001      	adds	r0, #1
 800311c:	d09b      	beq.n	8003056 <_printf_i+0x166>
 800311e:	3501      	adds	r5, #1
 8003120:	68e3      	ldr	r3, [r4, #12]
 8003122:	9903      	ldr	r1, [sp, #12]
 8003124:	1a5b      	subs	r3, r3, r1
 8003126:	42ab      	cmp	r3, r5
 8003128:	dcf2      	bgt.n	8003110 <_printf_i+0x220>
 800312a:	e7eb      	b.n	8003104 <_printf_i+0x214>
 800312c:	2500      	movs	r5, #0
 800312e:	f104 0619 	add.w	r6, r4, #25
 8003132:	e7f5      	b.n	8003120 <_printf_i+0x230>
 8003134:	08003411 	.word	0x08003411
 8003138:	08003422 	.word	0x08003422

0800313c <memchr>:
 800313c:	4603      	mov	r3, r0
 800313e:	b510      	push	{r4, lr}
 8003140:	b2c9      	uxtb	r1, r1
 8003142:	4402      	add	r2, r0
 8003144:	4293      	cmp	r3, r2
 8003146:	4618      	mov	r0, r3
 8003148:	d101      	bne.n	800314e <memchr+0x12>
 800314a:	2000      	movs	r0, #0
 800314c:	e003      	b.n	8003156 <memchr+0x1a>
 800314e:	7804      	ldrb	r4, [r0, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	428c      	cmp	r4, r1
 8003154:	d1f6      	bne.n	8003144 <memchr+0x8>
 8003156:	bd10      	pop	{r4, pc}

08003158 <memcpy>:
 8003158:	440a      	add	r2, r1
 800315a:	4291      	cmp	r1, r2
 800315c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003160:	d100      	bne.n	8003164 <memcpy+0xc>
 8003162:	4770      	bx	lr
 8003164:	b510      	push	{r4, lr}
 8003166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800316a:	4291      	cmp	r1, r2
 800316c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003170:	d1f9      	bne.n	8003166 <memcpy+0xe>
 8003172:	bd10      	pop	{r4, pc}

08003174 <memmove>:
 8003174:	4288      	cmp	r0, r1
 8003176:	b510      	push	{r4, lr}
 8003178:	eb01 0402 	add.w	r4, r1, r2
 800317c:	d902      	bls.n	8003184 <memmove+0x10>
 800317e:	4284      	cmp	r4, r0
 8003180:	4623      	mov	r3, r4
 8003182:	d807      	bhi.n	8003194 <memmove+0x20>
 8003184:	1e43      	subs	r3, r0, #1
 8003186:	42a1      	cmp	r1, r4
 8003188:	d008      	beq.n	800319c <memmove+0x28>
 800318a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800318e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003192:	e7f8      	b.n	8003186 <memmove+0x12>
 8003194:	4601      	mov	r1, r0
 8003196:	4402      	add	r2, r0
 8003198:	428a      	cmp	r2, r1
 800319a:	d100      	bne.n	800319e <memmove+0x2a>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031a6:	e7f7      	b.n	8003198 <memmove+0x24>

080031a8 <_free_r>:
 80031a8:	b538      	push	{r3, r4, r5, lr}
 80031aa:	4605      	mov	r5, r0
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d043      	beq.n	8003238 <_free_r+0x90>
 80031b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b4:	1f0c      	subs	r4, r1, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bfb8      	it	lt
 80031ba:	18e4      	addlt	r4, r4, r3
 80031bc:	f000 f8d0 	bl	8003360 <__malloc_lock>
 80031c0:	4a1e      	ldr	r2, [pc, #120]	; (800323c <_free_r+0x94>)
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	4610      	mov	r0, r2
 80031c6:	b933      	cbnz	r3, 80031d6 <_free_r+0x2e>
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	6014      	str	r4, [r2, #0]
 80031cc:	4628      	mov	r0, r5
 80031ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031d2:	f000 b8cb 	b.w	800336c <__malloc_unlock>
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	d90a      	bls.n	80031f0 <_free_r+0x48>
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	1862      	adds	r2, r4, r1
 80031de:	4293      	cmp	r3, r2
 80031e0:	bf01      	itttt	eq
 80031e2:	681a      	ldreq	r2, [r3, #0]
 80031e4:	685b      	ldreq	r3, [r3, #4]
 80031e6:	1852      	addeq	r2, r2, r1
 80031e8:	6022      	streq	r2, [r4, #0]
 80031ea:	6063      	str	r3, [r4, #4]
 80031ec:	6004      	str	r4, [r0, #0]
 80031ee:	e7ed      	b.n	80031cc <_free_r+0x24>
 80031f0:	461a      	mov	r2, r3
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	b10b      	cbz	r3, 80031fa <_free_r+0x52>
 80031f6:	42a3      	cmp	r3, r4
 80031f8:	d9fa      	bls.n	80031f0 <_free_r+0x48>
 80031fa:	6811      	ldr	r1, [r2, #0]
 80031fc:	1850      	adds	r0, r2, r1
 80031fe:	42a0      	cmp	r0, r4
 8003200:	d10b      	bne.n	800321a <_free_r+0x72>
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	4401      	add	r1, r0
 8003206:	1850      	adds	r0, r2, r1
 8003208:	4283      	cmp	r3, r0
 800320a:	6011      	str	r1, [r2, #0]
 800320c:	d1de      	bne.n	80031cc <_free_r+0x24>
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4401      	add	r1, r0
 8003214:	6011      	str	r1, [r2, #0]
 8003216:	6053      	str	r3, [r2, #4]
 8003218:	e7d8      	b.n	80031cc <_free_r+0x24>
 800321a:	d902      	bls.n	8003222 <_free_r+0x7a>
 800321c:	230c      	movs	r3, #12
 800321e:	602b      	str	r3, [r5, #0]
 8003220:	e7d4      	b.n	80031cc <_free_r+0x24>
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	1821      	adds	r1, r4, r0
 8003226:	428b      	cmp	r3, r1
 8003228:	bf01      	itttt	eq
 800322a:	6819      	ldreq	r1, [r3, #0]
 800322c:	685b      	ldreq	r3, [r3, #4]
 800322e:	1809      	addeq	r1, r1, r0
 8003230:	6021      	streq	r1, [r4, #0]
 8003232:	6063      	str	r3, [r4, #4]
 8003234:	6054      	str	r4, [r2, #4]
 8003236:	e7c9      	b.n	80031cc <_free_r+0x24>
 8003238:	bd38      	pop	{r3, r4, r5, pc}
 800323a:	bf00      	nop
 800323c:	20000090 	.word	0x20000090

08003240 <_malloc_r>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	1ccd      	adds	r5, r1, #3
 8003244:	f025 0503 	bic.w	r5, r5, #3
 8003248:	3508      	adds	r5, #8
 800324a:	2d0c      	cmp	r5, #12
 800324c:	bf38      	it	cc
 800324e:	250c      	movcc	r5, #12
 8003250:	2d00      	cmp	r5, #0
 8003252:	4606      	mov	r6, r0
 8003254:	db01      	blt.n	800325a <_malloc_r+0x1a>
 8003256:	42a9      	cmp	r1, r5
 8003258:	d903      	bls.n	8003262 <_malloc_r+0x22>
 800325a:	230c      	movs	r3, #12
 800325c:	6033      	str	r3, [r6, #0]
 800325e:	2000      	movs	r0, #0
 8003260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003262:	f000 f87d 	bl	8003360 <__malloc_lock>
 8003266:	4921      	ldr	r1, [pc, #132]	; (80032ec <_malloc_r+0xac>)
 8003268:	680a      	ldr	r2, [r1, #0]
 800326a:	4614      	mov	r4, r2
 800326c:	b99c      	cbnz	r4, 8003296 <_malloc_r+0x56>
 800326e:	4f20      	ldr	r7, [pc, #128]	; (80032f0 <_malloc_r+0xb0>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b923      	cbnz	r3, 800327e <_malloc_r+0x3e>
 8003274:	4621      	mov	r1, r4
 8003276:	4630      	mov	r0, r6
 8003278:	f000 f862 	bl	8003340 <_sbrk_r>
 800327c:	6038      	str	r0, [r7, #0]
 800327e:	4629      	mov	r1, r5
 8003280:	4630      	mov	r0, r6
 8003282:	f000 f85d 	bl	8003340 <_sbrk_r>
 8003286:	1c43      	adds	r3, r0, #1
 8003288:	d123      	bne.n	80032d2 <_malloc_r+0x92>
 800328a:	230c      	movs	r3, #12
 800328c:	4630      	mov	r0, r6
 800328e:	6033      	str	r3, [r6, #0]
 8003290:	f000 f86c 	bl	800336c <__malloc_unlock>
 8003294:	e7e3      	b.n	800325e <_malloc_r+0x1e>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	1b5b      	subs	r3, r3, r5
 800329a:	d417      	bmi.n	80032cc <_malloc_r+0x8c>
 800329c:	2b0b      	cmp	r3, #11
 800329e:	d903      	bls.n	80032a8 <_malloc_r+0x68>
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	441c      	add	r4, r3
 80032a4:	6025      	str	r5, [r4, #0]
 80032a6:	e004      	b.n	80032b2 <_malloc_r+0x72>
 80032a8:	6863      	ldr	r3, [r4, #4]
 80032aa:	42a2      	cmp	r2, r4
 80032ac:	bf0c      	ite	eq
 80032ae:	600b      	streq	r3, [r1, #0]
 80032b0:	6053      	strne	r3, [r2, #4]
 80032b2:	4630      	mov	r0, r6
 80032b4:	f000 f85a 	bl	800336c <__malloc_unlock>
 80032b8:	f104 000b 	add.w	r0, r4, #11
 80032bc:	1d23      	adds	r3, r4, #4
 80032be:	f020 0007 	bic.w	r0, r0, #7
 80032c2:	1ac2      	subs	r2, r0, r3
 80032c4:	d0cc      	beq.n	8003260 <_malloc_r+0x20>
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	50a3      	str	r3, [r4, r2]
 80032ca:	e7c9      	b.n	8003260 <_malloc_r+0x20>
 80032cc:	4622      	mov	r2, r4
 80032ce:	6864      	ldr	r4, [r4, #4]
 80032d0:	e7cc      	b.n	800326c <_malloc_r+0x2c>
 80032d2:	1cc4      	adds	r4, r0, #3
 80032d4:	f024 0403 	bic.w	r4, r4, #3
 80032d8:	42a0      	cmp	r0, r4
 80032da:	d0e3      	beq.n	80032a4 <_malloc_r+0x64>
 80032dc:	1a21      	subs	r1, r4, r0
 80032de:	4630      	mov	r0, r6
 80032e0:	f000 f82e 	bl	8003340 <_sbrk_r>
 80032e4:	3001      	adds	r0, #1
 80032e6:	d1dd      	bne.n	80032a4 <_malloc_r+0x64>
 80032e8:	e7cf      	b.n	800328a <_malloc_r+0x4a>
 80032ea:	bf00      	nop
 80032ec:	20000090 	.word	0x20000090
 80032f0:	20000094 	.word	0x20000094

080032f4 <_realloc_r>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	4607      	mov	r7, r0
 80032f8:	4614      	mov	r4, r2
 80032fa:	460e      	mov	r6, r1
 80032fc:	b921      	cbnz	r1, 8003308 <_realloc_r+0x14>
 80032fe:	4611      	mov	r1, r2
 8003300:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003304:	f7ff bf9c 	b.w	8003240 <_malloc_r>
 8003308:	b922      	cbnz	r2, 8003314 <_realloc_r+0x20>
 800330a:	f7ff ff4d 	bl	80031a8 <_free_r>
 800330e:	4625      	mov	r5, r4
 8003310:	4628      	mov	r0, r5
 8003312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003314:	f000 f830 	bl	8003378 <_malloc_usable_size_r>
 8003318:	42a0      	cmp	r0, r4
 800331a:	d20f      	bcs.n	800333c <_realloc_r+0x48>
 800331c:	4621      	mov	r1, r4
 800331e:	4638      	mov	r0, r7
 8003320:	f7ff ff8e 	bl	8003240 <_malloc_r>
 8003324:	4605      	mov	r5, r0
 8003326:	2800      	cmp	r0, #0
 8003328:	d0f2      	beq.n	8003310 <_realloc_r+0x1c>
 800332a:	4631      	mov	r1, r6
 800332c:	4622      	mov	r2, r4
 800332e:	f7ff ff13 	bl	8003158 <memcpy>
 8003332:	4631      	mov	r1, r6
 8003334:	4638      	mov	r0, r7
 8003336:	f7ff ff37 	bl	80031a8 <_free_r>
 800333a:	e7e9      	b.n	8003310 <_realloc_r+0x1c>
 800333c:	4635      	mov	r5, r6
 800333e:	e7e7      	b.n	8003310 <_realloc_r+0x1c>

08003340 <_sbrk_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	2300      	movs	r3, #0
 8003344:	4d05      	ldr	r5, [pc, #20]	; (800335c <_sbrk_r+0x1c>)
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	f7fd fa2e 	bl	80007ac <_sbrk>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_sbrk_r+0x1a>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_sbrk_r+0x1a>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	2000014c 	.word	0x2000014c

08003360 <__malloc_lock>:
 8003360:	4801      	ldr	r0, [pc, #4]	; (8003368 <__malloc_lock+0x8>)
 8003362:	f000 b811 	b.w	8003388 <__retarget_lock_acquire_recursive>
 8003366:	bf00      	nop
 8003368:	20000154 	.word	0x20000154

0800336c <__malloc_unlock>:
 800336c:	4801      	ldr	r0, [pc, #4]	; (8003374 <__malloc_unlock+0x8>)
 800336e:	f000 b80c 	b.w	800338a <__retarget_lock_release_recursive>
 8003372:	bf00      	nop
 8003374:	20000154 	.word	0x20000154

08003378 <_malloc_usable_size_r>:
 8003378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800337c:	1f18      	subs	r0, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfbc      	itt	lt
 8003382:	580b      	ldrlt	r3, [r1, r0]
 8003384:	18c0      	addlt	r0, r0, r3
 8003386:	4770      	bx	lr

08003388 <__retarget_lock_acquire_recursive>:
 8003388:	4770      	bx	lr

0800338a <__retarget_lock_release_recursive>:
 800338a:	4770      	bx	lr

0800338c <_init>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr

08003398 <_fini>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr
